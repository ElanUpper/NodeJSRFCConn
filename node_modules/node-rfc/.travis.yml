language: node_js

node_js:
  - "4.6.0"
  - "6.9.1"

env:
    matrix:
        - CXX=g++-4.8
    global:
            #secure: lKg1rBOpCFjlaEKThF4K2OxWBcq28IFR+2QFpP/pqSmlxzZF+JlX4cpfDUyHgPW5CRJ0MtjmXImq/gjt5VWH3ezbukCvIPhYJxeQPpWFUwyFYTQkjtQ8L+C5ea+XMT3M9yolsMrl1XVQFt488m7iKR2rDDUWzzEGw4aM0uOAPXALbP/Yeb3x+oWphQ//KGDUpr+paUpjxaeYAS7IR/O9dXkLk/eNwhcwxDApL64Mwb6ImMTUJaZIpxLp4lnzM+3RYQlqTo6kyC+GJ3vnX65PnJNI5OD+aGJmODW1P2FbNUjHxP/XHi5DHuObiyIhU4MurOk6uRfZZWu3BORQV1EmJNcWBGwxr6PAwihRCIJ/pug9pXudTBCNxEA+SBNP2QbKaRGF0p0p5KMsESerjU0oi8MLS811JGuOq+Re85NZuGeHtKGZuEpmqCpeM5jZbVhe8AhiSU1TTzKdUi6Gykdvs7mOosHk1mXeZP8+k1fGvOt8A0JF1wpvtD69YSAuGzSY9wFY6tnDD/DRB6ZRo8CQMq/r9EyTcvXzEdcHM0YbBN2NcPdKDmSHJRnK6ObbAgDth74i4z9Uz42FCXKm/JfL02PRlV6o/9PRnZ1WtFK06fOj7knb8HZpUQg6xykZ5j+T/gDQVRe04U2yXVzjM4rNc1x+eOwY2l4jMXmGgU8+PAU=
            #secure: U+Z9N1Qy1bQ6W1UMIt1bPErwYjVsy3LvIjLaTqJ3MK+2f9Sr23ODodwnoIJGkCVTU3lyulxPaHd3AQQ2Sg0nSKtRAklunqu2Z3msNmROklOdYhZuUmLCdozHBCuP40633QGEsCsfzODqVOopQf3IreKO4gCGnYixb6WJzQU8J3YyriBBlfrMGm3z6ZtX3OMZ8vAcY7p1SW22SGRtGYPkJMHCoEnwVbztan0B2pq7GCOb3+hp59LXFCoWOAxCngrkxZ+4j1TDT8iwF5I1/qJWlteFq9aQX1pYFc7MQixHqI03IdfpMiue5HoMKQiV40p0TN8HCRpI4bWcohYDMK9qZg2BtERNuEe/i6yUfGNH1MLitnpINa5/xETiKWX0y7UFcqPrgtUzoRLQ7sR9uhmZCh0hS3PuS4QjceLiwXNsHWlJVtNqVYCne54CKtOzPjNewSNW/93fAk/hit3w7k/HcL4/e5HdyTgX45MH9waZk5y88xDnBHlMpPVbh3rEMzlMPZP0V+Bia1ZZqaN8I+0soxywObTjGqbdT2Oczv5EMguhM0Tax6nqBKKY9t7ZB2/ZHvZ0W4utfX+ILUAgLg9nARM80KpGk4c2NpJh2yRhQdwSakUeonKPkNQZtO+ot6lVVXFSGtsm/8CUeUGtWGhRnNq8wue/tJ37j2mAHZVa4Lg=
        secure: g7CYeh9d+EhJnZvfKnuRA0woXUC3tNmrEkgcu8QPnuG4gRNyN6qs9vAOAHWZFwnURFjqMQb3iD1FC82klb0YFBwVAO620hwFB5yPEIKNYzROSJEhQlDSf7xQQx3h3bit5UB5u180Mi+Edhk8VuJAJ8tX0FYo4e1TWJ3UcdjUre4pTrOETxXLc+TggQVaULKTf1Ow8NgnBpInd+OEGIeLhz9hCX2HvD5Js0+JSGbVXOHSR25D1bJgrIqlJYt+7wLhHzsAL+P+sNPfAR4BlWmXewVYvAW1gUkIoB4aRBeDxiiZU6zQjl1rg9ijDMoqaanafuOWSDJWOLV0KBpgF07zY8Ot9NLbPDRmmdwCnjHDo2DtKCVdwkdGygFOxMNxUcVjTp6WnEQ8r5MdTJZ/zmNIQi3l+sJ0NuZyG7Vl1/V57Pq9ESFPmAV7dqNyz46KCZnSWWU0U166QWWcNKBwjAZXhef5i4K/84G2OEsTOU72UWW4RarFuHPnYb1lw2tezVamdniD9aWy/J14gn1/33XQLwZ+vIpV7yePDoe8Q3BOkSx5LvzPzniRmr5UvwdoHX8cKSj82A3AMsdrXohW0ySK5TPsT5kEvnId71HZ5zRnsTzM8rXMZC5Q5gan+uQz8Z9vtxgWtwYImdtsbX9iqJbcSrRZoovtNitiUUpYbCGr8Ek=

before_install:
- sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
- sudo apt-get update -q
- sudo apt-get install g++-4.8 -y
- wget http://archive.ubuntu.com/ubuntu/pool/main/e/eglibc/libc6-dev_2.19-0ubuntu6_amd64.deb
- wget http://archive.ubuntu.com/ubuntu/pool/main/e/eglibc/libc6_2.19-0ubuntu6_amd64.deb
- wget http://archive.ubuntu.com/ubuntu/pool/main/e/eglibc/libc-dev-bin_2.19-0ubuntu6_amd64.deb
- sudo dpkg -i libc*.deb
- dpkg -s libc6-dev
- wget --no-check-certificate https://github.wdf.sap.corp/D037732/nwrfclib/archive/master.zip
- unzip master.zip
- sudo mkdir -p /usr/local/sap
- sudo mv nwrfclib-master/740/nwrfcsdk /usr/local/sap
- echo "/usr/local/sap/nwrfcsdk/lib" | sudo tee /etc/ld.so.conf.d/nwrfcsdk.conf
- sudo ldconfig
- export SAPNWRFC_HOME=/usr/local/sap/nwrfcsdk
# needed for patched github (proxy)
- npm install request

# get commit message
- COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
# put local node-pre-gyp on PATH
- export PATH=./node_modules/.bin/:$PATH
# put global node-gyp on PATH
- npm install node-gyp -g
# figure out if we should publish
- PUBLISH_BINARY=false
# if we are building a tag then publish
- if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;
# or if we put [publish binary] in the commit message
- if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then PUBLISH_BINARY=true; fi;


install:
# ensure source install works
- npm install --build-from-source
# test our module
- npm test; if [ $? -ne 0 ]; then for i in *.trc; do echo $i; cat $i; done; false; fi

before_script:
- for i in $(ls module_mods/*.patch); do patch -N -p0 < $i; done
- echo "Publishing native platform Binary Package? ->" $PUBLISH_BINARY
# if publishing, do it
- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package; node-pre-gyp-github publish --release; fi;
# cleanup
- node-pre-gyp clean
- node-gyp clean

script:
# if publishing, test installing from remote
- INSTALL_RESULT=0
# - npm config set strict-ssl false -g
# - npm config set loglevel "verbose"
- if [[ $PUBLISH_BINARY == true ]]; then INSTALL_RESULT=$(npm install --fallback-to-build=false > /dev/null)$? || true; fi;
# if install returned non zero (errored) then we first unpublish and then call false so travis will bail at this line
- if [[ $INSTALL_RESULT != 0 ]]; then echo "returned $INSTALL_RESULT";node-pre-gyp-github unpublish;false; fi
# If success then we arrive here so lets clean up
- node-pre-gyp clean

after_success:
# if success then query and display all published binaries
- node-pre-gyp info

deploy:
  provider: npm
  email: iopapamanoglou@gmail.com
  api_key:
    secure: IwLpE2DoGN4CWHJ5GdYROhmIkz40CICh/AkNhInfqdqZ4NLg80rBJkY2EuxO6NlbaGET6SJ0nDMAh+gN8VT2GmLjQnsk03g2CU2azFeVvVVSxllMkmW5UTvThjuYEc6AhHu3BXXtnMWGoeewXyDpRY70IB8kCCKpx4JsXpeCoUAfxUi2VZQlZRYi6nHdGO59uh878sHto1RQ6QAFAuJTFu0k6to1bUjNfzQ/SUxLOWo7WBSMrMTpQmcKyK4H56AvwxrIGsYuexP6Vb2kk9n+kgM/iUCTTTwSL571gZw4tRAWO9l5tt+m7HomKt6jsMgqxlb7uP0kPPHZfsGCnNP52jD5h4s58mEnMyPGh6MTs6cypmqbOhS6g6WSbXyjrhJHPGxrDCKe9NCtiaR6Rr7rwXUixPukZjOtIbSCNhH1t0lIKqFKlx/gadklSV/Z6wZE2vcgF0wburgllvGPdwxH5bJrWjUyauNFa9XfbBxbAoWcLBrpkFJu9I7dON40r4Gv+3VNfSOmYcEw5NUnQEjVfDkZqG/n8GF/d6x+b3HT/VLvwYoCXOsAleFbfY86+pYaBtkrLPMORaMrRg2qMWkXdr9u9WUd9kzEwzJYd5cs51J69rCadoY9Wtyp3nPo+tLIEAe/ZjvDFyFCiuTkQfM9vD0jvn1uWM2gyKrc7Lod1Jo=
  on:
  #tags: true
    repo: D067587/node-rfc
    branch: master
